#include <iostream>
#include <vector>
#include <queue>
#include <string.h>
#include <algorithm>

/*예제 : 도난당한 조각상
괴도 성스러운 꼬리가 s시에 위치한 국립 중앙 박물관의 조각상 컬렉션을 모두 훔쳐갔습니다!
수사에 착수한 경찰 당국은 성스러운 꼬리가 조각상 컬렉션을 항구도시 t에서 외국으로 밀반출하려 한다는 첩보를 입수했습니다.
조각상 컬렉션은 부피가 크기 때문에 기차로 운반할 것이라고 수사 당국은 예측했습니다.
따라서 경찰은 s와 t를 제외한 역 중 일부에 수사관을 배치해 지나가는 모든 차량을 감시하려 합니다. 
각 기차역마다 원활한 수사를 위해 필요한 수사관의 배치 수가 주어지고, 역들을 잇는 철도망이 주어집니다.
성스러운 꼬리가 s, t를 제외한 임의의 기차역에 도착했을 때, 해당 기차역에 수사관이 충분히 배치되어 있다면 반드시 적발된다고 가정합니다.
이때, 수사 당국은 수사를 위해 필요한 수사관 배치 수를 최소로 하고 싶어합니다.*/

/*입력 설명 :
첫 줄에 기차역 수 v, 철도망의 수 e, 박물관의 위치 s, 항구도시의 위치 t가 주어집니다.
그 다음 줄에는 각 기차역에 배치해야 하는 수사관의 수가 v 만큼 주어집니다. 
입력되는 숫자는 0보다 크거나 같은 정수입니다. 그리고 s와 t에만 0이 입력됩니다.
그 다음 줄부터 e 개 줄까지 철도망의 상태를 입력합니다. 한 줄에 두 개의 정수가 입력되며, 
첫 번째 정수는 시작 지점, 두번째 정수는 도착 지점입니다.
*/ 
/*출력 설명 : 
수사관 배치 수가 최소인 정수를 출력하고, 그 다음 줄에 수사관을 배치해야 하는 역의 번호를 출력하기.
역의 번호를 사전순으로 출력하기기
*/
/*
입력 예제 : 
8 12 0 3
0 3 9 0 4 7 3 9
0 1
1 2
2 3
0 4
1 4 
4 2
4 5
2 5
5 6
6 3
0 7
7 6

출력 예제 : 
10
1 4 6
*/

using namespace std;

const int MAX_V = 200;
const int INF = 98754321;
int V;
int police[MAX_V];
int capacity[MAX_V][MAX_V], flow[MAX_V][MAX_V];

int fordFullkurson(int source, int sink, vector<int>& selected) {
    memset(flow, 0, sizeof(flow));
    int totalFlow = 0;
    while(true) {
        vector<int> parent(V, -1);
        queue<int> q;
        parent[source] = source;
        q.push(source);
        while(!q.empty() && parent[sink] == -1) {
            int here = q.front();
            q.pop();
            for(int i = 0; i < V; i++) {
                if(capacity[here][i] - flow[here][i] > 0 && parent[i] == -1) {
                    q.push(i);
                    parent[i] = here;
                }
            }
        }
        
        if(parent[sink] == -1) break;
        int amount = INF;
        for(int p=sink; p!=parent[p]; p=parent[p]) {
            amount = min(amount, capacity[parent[p]][p] - flow[parent[p]][p]);
        }
        bool isSelected = false;
        for(int p=sink; p!=parent[p]; p=parent[p]) {
            if(capacity[parent[p]][p] == amount && !isSelected) {
                isSelected = true;
                selected.push_back(parent[p]);
            } 
            flow[parent[p]][p] += amount;
            flow[p][parent[p]] -= amount;
        }
        totalFlow += amount;
    }
    return totalFlow;
}

int main()
{
    int e, source, sink;
    cin >> V >> e >> source >> sink;
    for(int i=0; i < V; i++) {
        cin >> police[i];
        if(i==source || i == sink) police[i]=INF;
    }
    for(int i = 0; i < e; i++) {
        int u, v;
        cin >> u >> v;
        capacity[u][v] = police[u];
    }
    vector<int> selected;
    cout << fordFullkurson(source, sink, selected) << "\n";
    sort(selected.begin(), selected.end());
    for(int i=0; i<selected.size(); i++) {
        cout << selected[i] << " ";
    }

    return 0;
}
