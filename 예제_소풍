#include <iostream>
#include <vector>

using namespace std;

/*
각 학생들의 쌍에 대해 이들이 서로 친구인지 여부가 주어질 때, 학생들을 짝 지을 수 있는
방법의 수를 계산하세요. 짝이 되는 학생들이 일부만 다르더라도 다른 방법이라고 봅니다.

입력 : 
첫 줄에는 학생의 수 N, 친구 쌍의 수 M이 주어집니다.
두번째 줄부터 M+1줄까지 서로 친구인 두 학생의 번호가 주어집니다.
번호는 모두 0부터 n-1 사이의 정수이고, 같은 쌍은 입력에 두번 주어지지 않습니다. 학생들의 수는 짝수입니다.

출력 : 
한 줄에 모든 학생을 친구끼리만 짝지어줄 수 있는 방법의 수를 출력합니다.
*/


const int MAX_N = 20;  // 학생 수 최대 입력값
int N, M;
// adj[y][x] = true -> 학생 y와 x가 서로 친구이다.
// adj[y][x] = false -> 학생 y와 x가 서로 친구가 아니다.
bool adj[MAX_N][MAX_N]; 

// 주어진 친구 쌍을 탐색해서 전부 친구 관계로만 짝지어줄 수 있는 모든 경우의 수를 출력합니다.
int matching(vector<bool>& matched) {
    // 아직 짝이 없는 친구 중 가장 빠른 번호를 가진 학생을 탐색
    int start = -1;
    for(int i = 0; i < N; i++) {
        if(!matched[i]) {
            start = i;
            break;
        }
    }
    // 모두 짝이 있다면 1가지 방법을 찾았다!
    if(start == -1) return 1;
    int ret = 0;
    // 중복을 피하기 위해 자기보다 번호가 큰 학생부터 탐색
    for(int i = start+1; i < N; i++) {
        if(!matched[start] && !matched[i] && adj[start][i]) {
            matched[start]=matched[i]=true;
            ret += matching(matched);
            matched[start]=matched[i]=false;
        }
    }
    return ret;
}

int main()
{
    cin >> N >> M;
    // 유향 그래프든 무향 그래프든 상관 없음.
    for(int i = 0; i < M; i++) {
        int x, y;
        cin >> x >> y;
        adj[x][y] = true;
    }
    vector<bool> matched(N, false);
    cout << matching(matched);

    return 0;
}
