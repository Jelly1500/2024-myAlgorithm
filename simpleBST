#include <iostream>
#include <vector>

using namespace std;

// 가장 단순한 이진 검색 트리 구현
// 균형 문제를 해결하지 못하였음
// 삽입, 검색, 삭제 기능 구현
// 트리 내부 구초 출력함수 print()는 트리를 중위 순회함

typedef int KeyType;

struct Node {
    KeyType key;
    Node* left;
    Node* right;
    
    Node(KeyType _key) : key(_key), left(nullptr), right(nullptr) {}
    
    void setLeft(Node* left) {
        this->left = left;
    }
    void setRight(Node* right) {
        this->right = right;
    }
};

void print(Node* root) {
    if(root == nullptr) return;
    print(root->left);
    cout << root->key << " ";
    print(root->right);
}

Node* insert(Node* root, Node* node) {
    if(root == nullptr) return node;
    if(root->key == node->key) {
        cout << node->key << " is already exist...\n";
        return root;
    } else if(root->key < node->key) {
        root->setRight(insert(root->right, node));
    } else {
        root->setLeft(insert(root->left, node));
    }
    
    return root;
}

Node* mergeLRSub(Node* root, Node* LRSub) {
    if(root->left == nullptr) {
        root->setLeft(LRSub);
        return root;
    }
    root->setLeft(mergeLRSub(root->left, LRSub));
    return root;
}

// node를 삭제할 때, 힙 영역 메모리 할당 해제 구현
Node* deleteKey(Node* root, KeyType key) {
    if(root == nullptr) {
        cout << key << " isn't exist...\n";
        return root;
    }
    if(root->key == key) {
        Node* toDelete = root;
        // find key node! let's delete it!
        if(root->left == nullptr) {
            root = root->right;
        } else if(root->right == nullptr) {
            root = root->left;
        } else {
            Node* temp = root->left;
            root->setRight(mergeLRSub(root->right, temp->right));
            temp->setRight(root->right);
            root = temp;
        }
        delete toDelete;
    }
    else if(root->key < key) {
        root->setRight(deleteKey(root->right, key));
    } else {
        root->setLeft(deleteKey(root->left, key));
    }
    return root;
}

int main()
{
    Node root(17);
    insert(&root, new Node(8));
    insert(&root, new Node(4));
    insert(&root, new Node(13));
    insert(&root, new Node(30));
    insert(&root, new Node(24));
    insert(&root, new Node(36));
    deleteKey(&root, 30);
    print(&root);

    return 0;
}
